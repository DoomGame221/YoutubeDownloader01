name: Release

on:
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  format:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install .NET
        uses: actions/setup-dotnet@v4.3.0
        with:
          dotnet-version: 9.0.x
      - name: Build
        run: >
          dotnet build
          -p:CSharpier_Bypass=true
          --configuration Release
      - name: Verify formatting
        id: verify
        run: >
          dotnet build
          -t:CSharpierFormat
          --configuration Release
          --no-restore
      - name: Report issues
        if: ${{ failure() && steps.verify.outcome == 'failure' }}
        run: echo "::error title=Bad formatting::Formatting issues detected. Please build the solution locally to fix them."

  build-and-release:
    needs: format
    strategy:
      matrix:
        rid:
          - win-arm64
          - win-x86
          - win-x64
        bundle-ffmpeg:
          - true
          - false
        include:
          - bundle-ffmpeg: true
            artifact-name-base: YoutubeDownloader
          - bundle-ffmpeg: false
            artifact-name-base: YoutubeDownloader.Bare

    runs-on: ${{ startsWith(matrix.rid, 'win-') && 'windows-latest' || startsWith(matrix.rid, 'osx-') && 'macos-latest' || 'ubuntu-latest' }}
    timeout-minutes: 10
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0 # Need full history for tag counting

      - name: Install .NET
        uses: actions/setup-dotnet@v4.3.0
        with:
          dotnet-version: 9.0.x

      - name: Calculate version
        id: version
        run: |
          LAST_TAG=$(git tag --list 'v*' | sort -V | tail -n1)
          if [ -z "$LAST_TAG" ]; then
            NEW_VERSION="v1.0.0"
          else
            LAST_NUM=$(echo $LAST_TAG | cut -d'.' -f3 | sed 's/v//g')
            NEW_NUM=$((LAST_NUM + 1))
            NEW_VERSION="v1.0.${NEW_NUM}"
          fi
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Download FFmpeg
        if: ${{ matrix.bundle-ffmpeg }}
        shell: pwsh
        run: YoutubeDownloader/DownloadFFmpeg.ps1 -platform ${{ matrix.rid }}

      - name: Publish app
        run: >
          dotnet publish YoutubeDownloader
          -p:Version=${{ steps.version.outputs.version }}-ci-${{ github.sha }}
          -p:CSharpier_Bypass=true
          --output YoutubeDownloader/bin/publish
          --configuration Release
          --runtime ${{ matrix.rid }}
          --self-contained

      - name: Set permissions (app)
        if: ${{ !startsWith(matrix.rid, 'win-') }}
        run: chmod +x YoutubeDownloader/bin/publish/YoutubeDownloader

      - name: Set permissions (FFmpeg)
        if: ${{ !startsWith(matrix.rid, 'win-') && matrix.bundle-ffmpeg }}
        run: chmod +x YoutubeDownloader/bin/publish/ffmpeg

      - name: Create package
        working-directory: YoutubeDownloader/bin/publish
        run: zip -r ../../${{ matrix.artifact-name-base }}.${{ matrix.rid }}.zip .

      - name: Create Release and Upload Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ steps.version.outputs.version }} \
            --title "Release ${{ steps.version.outputs.version }}" \
            --notes "Automated release for commit ${{ github.sha }}" \
            --draft=false \
            YoutubeDownloader/${{ matrix.artifact-name-base }}.${{ matrix.rid }}.zip

  notify:
    needs: build-and-release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
      - name: Get latest version
        id: version
        run: |
          VERSION=$(git tag --list 'v*' | sort -V | tail -n1)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Notify Discord
        uses: tyrrrz/action-http-request@1.1.3
        with:
          url: ${{ secrets.DISCORD_WEBHOOK }}
          method: POST
          headers: |
            Content-Type: application/json; charset=UTF-8
          body: |
            {
              "username": "GitHub Actions",
              "avatar_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
              "content": "**YoutubeDownloader01 ‡∏°‡∏µ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡∏°‡πà! üéâ**\n‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô ${{ steps.version.outputs.version }} ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: [‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà](<https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}>)"
            }
          retry-count: 5
