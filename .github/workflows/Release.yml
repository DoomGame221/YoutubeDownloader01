name: Release

on:
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  format:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install .NET
        uses: actions/setup-dotnet@v4.3.0
        with:
          dotnet-version: 9.0.x
      - name: Build
        run: >
          dotnet build
          -p:CSharpier_Bypass=true
          --configuration Release
      - name: Verify formatting
        id: verify
        run: >
          dotnet build
          -t:CSharpierFormat
          --configuration Release
          --no-restore
      - name: Report issues
        if: ${{ failure() && steps.verify.outcome == 'failure' }}
        run: echo "::error title=Bad formatting::Formatting issues detected. Please build the solution locally to fix them."

  pack:
    strategy:
      matrix:
        rid:
          - win-arm64
          - win-x86
          - win-x64
#          - linux-arm64
#          - linux-x64
#          - osx-arm64
#          - osx-x64
        bundle-ffmpeg:
          - true
          - false
        include:
          - bundle-ffmpeg: true
            artifact-name-base: YoutubeDownloader
          - bundle-ffmpeg: false
            artifact-name-base: YoutubeDownloader.Bare
        exclude:
          - bundle-ffmpeg: true
            rid: linux-arm64
    runs-on: ${{ startsWith(matrix.rid, 'win-') && 'windows-latest' || startsWith(matrix.rid, 'osx-') && 'macos-latest' || 'ubuntu-latest' }}
    timeout-minutes: 10
    permissions:
      actions: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Install .NET
        uses: actions/setup-dotnet@v4.3.0
        with:
          dotnet-version: 9.0.x
      - name: Download FFmpeg
        if: ${{ matrix.bundle-ffmpeg }}
        shell: pwsh
        run: YoutubeDownloader/DownloadFFmpeg.ps1 -platform ${{ matrix.rid }}
      - name: Publish app
        run: >
          dotnet publish YoutubeDownloader
          -p:Version=999.9.9-ci-${{ github.sha }}
          -p:CSharpier_Bypass=true
          --output YoutubeDownloader/bin/publish
          --configuration Release
          --runtime ${{ matrix.rid }}
          --self-contained
      - name: Upload artifacts
        uses: actions/upload-artifact@v4.6.0
        with:
          name: ${{ matrix.artifact-name-base }}.${{ matrix.rid }}
          path: YoutubeDownloader/bin/publish
          if-no-files-found: error

  deploy:
    needs: pack
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write  # ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç release
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0  # ‡∏î‡∏∂‡∏á history ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö tags

      - name: Get latest tag
        id: get_tag
        run: |
          # ‡∏î‡∏∂‡∏á tag ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö vX.X.X
          latest_tag=$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n 1)
          if [ -z "$latest_tag" ]; then
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ tag ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà v1.0.0
            echo "tag=v1.0.0" >> $GITHUB_OUTPUT
          else
            # ‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏ß‡∏ô version ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° 0.0.1
            version=${latest_tag#v}  # ‡∏•‡∏ö 'v' ‡∏≠‡∏≠‡∏Å
            IFS='.' read -r major minor patch <<< "$version"
            new_patch=$((patch + 1))
            new_version="$major.$minor.$new_patch"
            echo "tag=v$new_version" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          path: artifacts

      - name: Create or Update Release
        id: create_release
        run: |
          TAG=${{ steps.get_tag.outputs.tag }}
          # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ tag ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG exists, using existing release"
            echo "release exists, will update assets"
          else
            gh release create "$TAG" \
              --title "Release $TAG" \
              --notes "Automated release for $TAG" \
              --prerelease
            echo "Created new release for $TAG"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        run: |
          TAG=${{ steps.get_tag.outputs.tag }}
          for artifact in artifacts/*/*.zip; do
            if [ -f "$artifact" ]; then
              gh release upload "$TAG" "$artifact" --clobber
              echo "Uploaded $artifact to $TAG"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
    steps:
      - name: Notify Discord
        uses: tyrrrz/action-http-request@1.1.3
        with:
          url: ${{ secrets.DISCORD_WEBHOOK }}
          method: POST
          headers: |
            Content-Type: application/json; charset=UTF-8
          body: |
            {
              "username": "GitHub Actions",
              "avatar_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
              "content": "**YoutubeDownloader01 ‡∏°‡∏µ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡∏°‡πà! üéâ**\n‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: [‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà](<https://github.com/${{ github.repository }}/releases/latest>)"
            }
          retry-count: 5
