name: Release

on:
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_version.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0 # ‡∏î‡∏∂‡∏á history ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö tags

      - name: Calculate next version
        id: get_version
        run: |
          # ‡∏´‡∏≤ tag ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
          LATEST_TAG=$(git tag --list 'v*' | sort -V | tail -n 1)
          
          if [ -z "$LATEST_TAG" ]; then
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ tag ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà v1.0.0
            NEW_TAG="v1.0.0"
          else
            # ‡πÅ‡∏¢‡∏Å version ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÜ
            VERSION=${LATEST_TAG#v}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° PATCH version
            NEW_PATCH=$((PATCH + 1))
            NEW_TAG="v$MAJOR.$MINOR.$NEW_PATCH"
          fi
          
          echo "New tag: $NEW_TAG"
          echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT

  format:
    needs: version
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Install .NET
        uses: actions/setup-dotnet@v4.3.0
        with:
          dotnet-version: 9.0.x

      - name: Build
        run: >
          dotnet build
          -p:CSharpier_Bypass=true
          --configuration Release
      - name: Verify formatting
        id: verify
        run: >
          dotnet build
          -t:CSharpierFormat
          --configuration Release
          --no-restore
      - name: Report issues
        if: ${{ failure() && steps.verify.outcome == 'failure' }}
        run: echo "::error title=Bad formatting::Formatting issues detected. Please build the solution locally to fix them."

  pack:
    needs: version
    strategy:
      matrix:
        rid:
          - win-arm64
          - win-x86
          - win-x64
        bundle-ffmpeg:
          - true
          - false
        include:
          - bundle-ffmpeg: true
            artifact-name-base: YoutubeDownloader
          - bundle-ffmpeg: false
            artifact-name-base: YoutubeDownloader.Bare

    runs-on: ${{ startsWith(matrix.rid, 'win-') && 'windows-latest' || 'ubuntu-latest' }}
    timeout-minutes: 10
    permissions:
      actions: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Install .NET
        uses: actions/setup-dotnet@v4.3.0
        with:
          dotnet-version: 9.0.x

      - name: Download FFmpeg
        if: ${{ matrix.bundle-ffmpeg }}
        shell: pwsh
        run: YoutubeDownloader/DownloadFFmpeg.ps1 -platform ${{ matrix.rid }}

      - name: Publish app
        run: >
          dotnet publish YoutubeDownloader
          -p:Version=${{ needs.version.outputs.tag }}
          -p:CSharpier_Bypass=true
          --output YoutubeDownloader/bin/publish
          --configuration Release
          --runtime ${{ matrix.rid }}
          --self-contained
      - name: Upload artifacts
        uses: actions/upload-artifact@v4.6.0
        with:
          name: ${{ matrix.artifact-name-base }}.${{ matrix.rid }}
          path: YoutubeDownloader/bin/publish
          if-no-files-found: error

  deploy:
    needs: [version, pack]
    strategy:
      matrix:
        rid:
          - win-arm64
          - win-x86
          - win-x64
        bundle-ffmpeg:
          - true
          - false
        include:
          - bundle-ffmpeg: true
            artifact-name-base: YoutubeDownloader
          - bundle-ffmpeg: false
            artifact-name-base: YoutubeDownloader.Bare

    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      actions: read
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Download artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          name: ${{ matrix.artifact-name-base }}.${{ matrix.rid }}
          path: YoutubeDownloader/

      - name: Set permissions (app)
        if: ${{ !startsWith(matrix.rid, 'win-') }}
        run: chmod +x YoutubeDownloader/YoutubeDownloader

      - name: Set permissions (FFmpeg)
        if: ${{ !startsWith(matrix.rid, 'win-') && matrix.bundle-ffmpeg }}
        run: chmod +x YoutubeDownloader/ffmpeg

      - name: Create package
        working-directory: YoutubeDownloader/
        run: zip -r ../${{ matrix.artifact-name-base }}.${{ matrix.rid }}.zip .

      - name: Create Release and Upload Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # ‡∏™‡∏£‡πâ‡∏≤‡∏á release ‡πÅ‡∏•‡∏∞ tag
          gh release create ${{ needs.version.outputs.tag }} \
            --title "${{ needs.version.outputs.tag }}" \
            --generate-notes \
            ${{ matrix.artifact-name-base }}.${{ matrix.rid }}.zip

  notify:
    needs: [version, deploy]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
    steps:
      - name: Notify Discord
        uses: tyrrrz/action-http-request@1.1.3
        with:
          url: ${{ secrets.DISCORD_WEBHOOK }}
          method: POST
          headers: |
            Content-Type: application/json; charset=UTF-8
          body: |
            {
              "username": "GitHub Actions",
              "avatar_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
              "content": "**YoutubeDownloader01 ‡∏°‡∏µ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡∏°‡πà! üéâ**\n‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: [‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà](https://github.com/DoomGame221/YoutubeDownloader01/releases/${{ needs.version.outputs.tag }})"
            }
          retry-count: 5
